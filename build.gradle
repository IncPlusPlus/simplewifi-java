/*
 * This file was generated by the Gradle 'init' task.
 */
plugins {
    id "com.ullink.nuget" version "2.22"
    id "com.ullink.msbuild" version "3.9"
}

nugetRestore {
    solutionFile = 'src/main/dotnet/SimpleWifi-java.sln'
}

msbuild {
    // mandatory (one of those)
//    projectFile = file('src/my-project.csproj')
    solutionFile = 'src/main/dotnet/SimpleWifi-java.sln'

    // MsBuild project name (/p:Project=...)
//    projectName = ManagedNativeWifi.Demo

    // Verbosity (/v:detailed, by default uses gradle logging level)
//    verbosity = 'detailed'

    // targets to execute (/t:Clean;Rebuild, no default)
    targets = ['Clean', 'Rebuild']


    // MsBuild resolution
    // it support to search the msbuild tools from vswhere (by default it searches the latest)
//    version = '15.0'
    // or define the exact msbuild dir explicity
//    msbuildDir = 'C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\MSBuild\\Current\\Bin'


    // Below values can override settings from the project file

    // overrides project OutputPath
//    destinationDir = 'src/main/resources'

    // overrides project IntermediaryOutputPath
//    intermediateDir = 'build/msbuild/obj'

    // Generates XML documentation file (from javadoc through custom DocLet)
    generateDoc = false

    // Other msbuild options can be set:
    // loggerAssembly, generateDoc, debugType, optimize, debugSymbols, configuration, platform, defineConstants ...
    debugSymbols = false
    debugType = "None"

    // you can also provide properties by name (/p:SomeProperty=Value)
//    parameters.SomeProperty = 'Value'

    // Or, if you use built-in msbuild parameters that aren't directly available here,
    // you can take advantage of the ExtensionAware interface
//    ext["flp1"] = "LogFile=" + file("${project.name}.errors.log").path + ";ErrorsOnly;Verbosity=diag"
}

//apply plugin: 'java'

task printStartedMsbuild() {
    doFirst {
        println('travis_fold:start:msbuild')
    }
}

task printFinishedMsbuild(type: Copy) {
    doFirst {
        println('travis_fold:end:msbuild')
    }
    from file("${rootDir}/src/main/dotnet/JavaInterop/bin/Debug/JavaInterop.exe")
    into file("${rootDir}/src/main/resources")
}

task ensureExeExists() {
    doFirst {
        if (!file("${rootDir}/src/main/resources/JavaInterop.exe").exists()) {
            logger.log(LogLevel.ERROR, "JavaInterop.exe not found. " +
                    "It is crucial to the usefulness of this library that it is included in the resources folder.")
            throw new GradleException("JavaInterop.exe not found. Please see log.") as Throwable
        }
        else {
            logger.quiet("JavaInterop.exe exists where it should. Continuing build.")
        }
    }
}

clean.doFirst {
    delete "${rootDir}/src/main/resources/JavaInterop.exe"
    delete "${rootDir}/src/main/resources/JavaInterop.exe.config"
    delete "${rootDir}/src/main/resources/Newtonsoft.Json.xml"
    delete "${rootDir}/src/main/resources/SimpleWifi.dll"
    delete "${rootDir}/src/main/resources/*.dll"
}

printStartedMsbuild.dependsOn(project.tasks.nugetRestore)
printFinishedMsbuild.dependsOn(project.tasks.msbuild)
project.tasks.msbuild.dependsOn(printStartedMsbuild)
ensureExeExists.dependsOn(project.tasks.printFinishedMsbuild)

build.finalizedBy(ensureExeExists)

//assemblyInfoPatcher {
//    // mandatory if you want to patch your AssemblyInfo.cs/fs/vb
//
//    // replaces the AssemblyVersion value in your AssemblyInfo file.
//    // when explicitly set to blank, AssemblyVersion will not be updated and will keep the existing value in your AssemblyInfo file
//    // TODO: not yet normalized, beware than .Net version must be X.Y.Z.B format, with Z/B optionals
//    version = project.version + '.0.0'
//
//    // replaces the AssemblyFileVersion value in your AssemblyInfo file.
//    // defaults to above version, fewer restrictions on the format
//    // when explicitly set to blank, AssemblyFileVersion will not be updated and will keep the existing value in your AssemblyInfo file
//    fileVersion = version + '-Beta'
//
//    // replaces the AssemblyInformationalVersion value in your AssemblyInfo file.
//    // defaults to above version, fewer restrictions on the format
//    // when explicitly set to blank, AssemblyInformationalVersion will not be updated and will keep the existing value in your AssemblyInfo file
//    informationalVersion = version + '-Beta'
//
//    // replaces the AssemblyDescription in the your AssemblyInfo file.
//    // when set to blank (default), AssemblyDescription will not be updated and will keep the existing value in your AssemblyInfo file
//    description = 'My Project Description'
//
//    // default to msbuild main project (of solution)
//    projects = [ 'MyProject1', 'MyProject2' ]
//}